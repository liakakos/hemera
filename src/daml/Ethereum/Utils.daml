daml 1.2

module Ethereum.Utils where

import DA.Text
import DA.List
import DA.Optional


gasBaseFee : Int = 21000  -- https://github.com/ethereum/wiki/wiki/Design-Rationale


data EtherUnits = Wei    Decimal
                | Kwei   Decimal
                | Mwei   Decimal
                | Gwei   Decimal
                | Szabo  Decimal
                | Finney Decimal
                | Ether  Decimal
                | Kether Decimal
                | Mether Decimal
                | Gether Decimal
  deriving (Eq, Show)


checkDecimals : Text -> Bool
checkDecimals weiText =
  let decimalsText = DA.Text.takeWhileEnd (\c -> c /= ".") weiText
      optDecimals = parseDecimal decimalsText
  in case optDecimals of
    Some decimal -> decimal == 0.0
    None -> False


validEtherUnits : EtherUnits -> Bool
validEtherUnits units = case units of
  Wei    v -> v >= 0.0 && (checkDecimals $ show v)
  Kwei   v -> v >= 0.0 && (checkDecimals $ show $ v * 1e3)
  Mwei   v -> v >= 0.0 && (checkDecimals $ show $ v * 1e6)
  Gwei   v -> v >= 0.0 && (checkDecimals $ show $ v * 1e9)
  Szabo  v -> v >= 0.0 && (checkDecimals $ show $ v * 1e12)
  Finney v -> v >= 0.0 && (checkDecimals $ show $ v * 1e15)
  Ether  v -> v >= 0.0 && (checkDecimals $ show $ v * 1e18)
  Kether v -> v >= 0.0 && (checkDecimals $ show $ v * 1e21)
  Mether v -> v >= 0.0 && (checkDecimals $ show $ v * 1e24)
  Gether v -> v >= 0.0 && (checkDecimals $ show $ v * 1e27)


zeroWei : EtherUnits = Wei 0.0


toWeiText : EtherUnits -> Text
toWeiText etherUnits =
  let wei = case etherUnits of
        Wei    v -> v
        Kwei   v -> v * 1e3
        Mwei   v -> v * 1e6
        Gwei   v -> v * 1e9
        Szabo  v -> v * 1e12
        Finney v -> v * 1e15
        Ether  v -> v * 1e18
        Kether v -> v * 1e21
        Mether v -> v * 1e24
        Gether v -> v * 1e27
  in DA.Text.takeWhile (\c -> c /= ".") $ show wei


data ABIType = ABIBool
             | ABIUint Int
             | ABIInt Int
             | ABIBytes Int
             | ABIDynamicBytes
             | ABIString
             | ABIAddress
  deriving (Eq, Show)


abiInt    : ABIType = ABIInt 256
abiInt8   : ABIType = ABIInt 8
abiInt16  : ABIType = ABIInt 16
abiInt24  : ABIType = ABIInt 24
abiInt32  : ABIType = ABIInt 32
abiInt40  : ABIType = ABIInt 40
abiInt48  : ABIType = ABIInt 48
abiInt56  : ABIType = ABIInt 56
abiInt64  : ABIType = ABIInt 64
abiInt72  : ABIType = ABIInt 72
abiInt80  : ABIType = ABIInt 80
abiInt88  : ABIType = ABIInt 88
abiInt96  : ABIType = ABIInt 96
abiInt104 : ABIType = ABIInt 104
abiInt112 : ABIType = ABIInt 112
abiInt120 : ABIType = ABIInt 120
abiInt128 : ABIType = ABIInt 128
abiInt136 : ABIType = ABIInt 136
abiInt144 : ABIType = ABIInt 144
abiInt152 : ABIType = ABIInt 152
abiInt160 : ABIType = ABIInt 160
abiInt168 : ABIType = ABIInt 168
abiInt176 : ABIType = ABIInt 176
abiInt184 : ABIType = ABIInt 184
abiInt192 : ABIType = ABIInt 192
abiInt200 : ABIType = ABIInt 200
abiInt208 : ABIType = ABIInt 208
abiInt216 : ABIType = ABIInt 216
abiInt224 : ABIType = ABIInt 224
abiInt232 : ABIType = ABIInt 232
abiInt240 : ABIType = ABIInt 240
abiInt248 : ABIType = ABIInt 248
abiInt256 : ABIType = ABIInt 256


abiInts = [abiInt8,   abiInt16,  abiInt24,  abiInt32,
           abiInt40,  abiInt48,  abiInt56,  abiInt64,
           abiInt72,  abiInt80,  abiInt88,  abiInt96,
           abiInt104, abiInt112, abiInt120, abiInt128,
           abiInt136, abiInt144, abiInt152, abiInt160,
           abiInt168, abiInt176, abiInt184, abiInt192,
           abiInt200, abiInt208, abiInt216, abiInt224,
           abiInt232, abiInt240, abiInt248, abiInt256]


abiUint    : ABIType = ABIUint 256
abiUint8   : ABIType = ABIUint 8
abiUint16  : ABIType = ABIUint 16
abiUint24  : ABIType = ABIUint 24
abiUint32  : ABIType = ABIUint 32
abiUint40  : ABIType = ABIUint 40
abiUint48  : ABIType = ABIUint 48
abiUint56  : ABIType = ABIUint 56
abiUint64  : ABIType = ABIUint 64
abiUint72  : ABIType = ABIUint 72
abiUint80  : ABIType = ABIUint 80
abiUint88  : ABIType = ABIUint 88
abiUint96  : ABIType = ABIUint 96
abiUint104 : ABIType = ABIUint 104
abiUint112 : ABIType = ABIUint 112
abiUint120 : ABIType = ABIUint 120
abiUint128 : ABIType = ABIUint 128
abiUint136 : ABIType = ABIUint 136
abiUint144 : ABIType = ABIUint 144
abiUint152 : ABIType = ABIUint 152
abiUint160 : ABIType = ABIUint 160
abiUint168 : ABIType = ABIUint 168
abiUint176 : ABIType = ABIUint 176
abiUint184 : ABIType = ABIUint 184
abiUint192 : ABIType = ABIUint 192
abiUint200 : ABIType = ABIUint 200
abiUint208 : ABIType = ABIUint 208
abiUint216 : ABIType = ABIUint 216
abiUint224 : ABIType = ABIUint 224
abiUint232 : ABIType = ABIUint 232
abiUint240 : ABIType = ABIUint 240
abiUint248 : ABIType = ABIUint 248
abiUint256 : ABIType = ABIUint 256


abiUints = [abiUint8,   abiUint16,  abiUint24,  abiUint32,
            abiUint40,  abiUint48,  abiUint56,  abiUint64,
            abiUint72,  abiUint80,  abiUint88,  abiUint96,
            abiUint104, abiUint112, abiUint120, abiUint128,
            abiUint136, abiUint144, abiUint152, abiUint160,
            abiUint168, abiUint176, abiUint184, abiUint192,
            abiUint200, abiUint208, abiUint216, abiUint224,
            abiUint232, abiUint240, abiUint248, abiUint256]


abiByte    : ABIType = ABIBytes 1
abiBytes1  : ABIType = ABIBytes 1
abiBytes2  : ABIType = ABIBytes 2
abiBytes3  : ABIType = ABIBytes 3
abiBytes4  : ABIType = ABIBytes 4
abiBytes5  : ABIType = ABIBytes 5
abiBytes6  : ABIType = ABIBytes 6
abiBytes7  : ABIType = ABIBytes 7
abiBytes8  : ABIType = ABIBytes 8
abiBytes9  : ABIType = ABIBytes 9
abiBytes10 : ABIType = ABIBytes 10
abiBytes11 : ABIType = ABIBytes 11
abiBytes12 : ABIType = ABIBytes 12
abiBytes13 : ABIType = ABIBytes 13
abiBytes14 : ABIType = ABIBytes 14
abiBytes15 : ABIType = ABIBytes 15
abiBytes16 : ABIType = ABIBytes 16
abiBytes17 : ABIType = ABIBytes 17
abiBytes18 : ABIType = ABIBytes 18
abiBytes19 : ABIType = ABIBytes 19
abiBytes20 : ABIType = ABIBytes 20
abiBytes21 : ABIType = ABIBytes 21
abiBytes22 : ABIType = ABIBytes 22
abiBytes23 : ABIType = ABIBytes 23
abiBytes24 : ABIType = ABIBytes 24
abiBytes25 : ABIType = ABIBytes 25
abiBytes26 : ABIType = ABIBytes 26
abiBytes27 : ABIType = ABIBytes 27
abiBytes28 : ABIType = ABIBytes 28
abiBytes29 : ABIType = ABIBytes 29
abiBytes30 : ABIType = ABIBytes 30
abiBytes31 : ABIType = ABIBytes 31
abiBytes32 : ABIType = ABIBytes 32


abiBytes = [abiBytes1,  abiBytes2,  abiBytes3,  abiBytes4,
            abiBytes5,  abiBytes6,  abiBytes7,  abiBytes8,
            abiBytes9,  abiBytes10, abiBytes11, abiBytes12,
            abiBytes13, abiBytes14, abiBytes15, abiBytes16,
            abiBytes17, abiBytes18, abiBytes19, abiBytes20,
            abiBytes21, abiBytes22, abiBytes23, abiBytes24,
            abiBytes25, abiBytes26, abiBytes27, abiBytes28,
            abiBytes29, abiBytes30, abiBytes31, abiBytes32]


data ABIValue = ABIValue with
                  abiType  : ABIType
                  abiValue : Text
              | ABIList [ABIValue]
  deriving (Eq, Show)


validABITypes : [ABIType] -> Bool
validABITypes xs = and (map validABIType xs)


validABIType : ABIType -> Bool
validABIType t = case t of
  ABIInt   i -> elem (ABIInt i) abiInts
  ABIUint  u -> elem (ABIUint u) abiUints
  ABIBytes b -> elem (ABIBytes b) abiBytes
  _          -> True


validABIValues : [ABIValue] -> Bool
validABIValues xs = and (map validABIValue xs)


validABIValue : ABIValue -> Bool
validABIValue abiValue = case abiValue of
    ABIValue ABIAddress a -> validAddress a
    ABIValue t v -> validABIType t  -- skip other value checks
    ABIList (x::xs) -> (validABIValue x) && validABIValue (ABIList xs)
    ABIList [] -> True


data SendStatus = New
                | Pending
                | Sent with
                    when   : Time
                    from   : Text
                    txHash : Optional Text
                | FailedToSend with
                    reason : Text
  deriving (Eq, Show)


checkNesting : [ABIValue] -> Int -> Int -> Bool
checkNesting _ curr limit | curr == limit = False
checkNesting [] _ _ = True
checkNesting (x::xs) i limit =
  case x of
    ABIList y -> checkNesting y (i+1) limit && checkNesting xs i limit
    _  -> checkNesting xs i limit


hexToDec : Text -> Optional Int
hexToDec c = case c of
  "a" -> Some 10
  "A" -> Some 10
  "b" -> Some 11
  "B" -> Some 11
  "c" -> Some 12
  "C" -> Some 12
  "d" -> Some 13
  "D" -> Some 13
  "e" -> Some 14
  "E" -> Some 14
  "f" -> Some 15
  "F" -> Some 15
  _ -> let optInt = parseInt c
       in case optInt of
       Some i -> if i >= 0 && i <= 9 then optInt else None
       None -> None


parseByte : Text -> Optional Int
parseByte byte | DA.Text.length byte /= 2 = None
parseByte byte = let chars = explode byte
                     firstHex = hexToDec $ head chars
                     lastHex = hexToDec $ last chars
                     hello = 0xc3
                 in if firstHex == None || lastHex == None then None
                    else Some (16 * (fromSome firstHex) + (fromSome lastHex))


stripRLPListLength : Text -> Text
stripRLPListLength rlp =
  let rlps = toByteList rlp
      len = DA.List.length rlps
      in if len == 0 then rlp else
      let prefix = byteToInt $ head rlps
      in case prefix of
      p | p < 0x7f                    -> rlp
      p | p <= 0xb7 && len > p - 0x7f -> rlp
      p | p <= 0xbf && len > p - 0xb7
          + byteToInt (implode (DA.List.take (p - 0xb7) (DA.List.drop 1 rlps)))
                                      -> rlp
      p | p <= 0xf7 && len > p - 0xc0 -> implode $ tail rlps
      p | p <= 0xff && len > p - 0xf7 && len > p - 0xf7
          + byteToInt (implode (DA.List.take (p - 0xf7) (DA.List.drop 1 rlps)))
                                      -> implode $ DA.List.drop (1 + p - 0xf7) rlps
      _                               -> rlp


byteToInt : Text -> Int
byteToInt hexWithPrefix = fromSome $ parseBytes $ toByteList hexWithPrefix


sumBytes : [Int] -> Int
sumBytes [] = 0
sumBytes xs = last xs + 256 * sumBytes (init xs)


parseBytes : [Text] -> Optional Int
parseBytes byteList =
  let optInts = map parseByte byteList
  in if any isNone optInts then None else
    let ints = map fromSome optInts
    in Some (sumBytes ints)


toByteList : Text -> [Text]
toByteList hexWithPrefix =
  let hex = DA.Text.dropPrefix "0x" hexWithPrefix
  in map implode $ group2 (explode hex)


group2 : [Text] -> [[Text]]
group2 [] = []
group2 l = (DA.List.take 2 l) :: (group2 (DA.List.drop 2 l))


validHex : Text -> Bool
validHex hexWithPrefix =
  let bytes = toByteList hexWithPrefix
  in not (any isNone $ map parseByte bytes)


validAddress : Text -> Bool
validAddress addr = validHex addr && DA.List.length (toByteList addr) == 20


validSignedTx : Text -> Text -> Bool
validSignedTx unsigned signed =
  validHex signed &&
  DA.Text.isPrefixOf (stripRLPListLength unsigned) (stripRLPListLength signed)
