daml 1.2

module Ethereum.Utils where

import DA.Date
import DA.Text

data EtherUnits = Wei Decimal
                | Kwei Decimal
                | Mwei Decimal
                | Gwei Decimal
                | Szabo Decimal
                | Finney Decimal
                | Ether Decimal
                | Kether Decimal
                | Mether Decimal
                | Gether Decimal
  deriving (Eq, Show)


toWeiText : EtherUnits -> Text
toWeiText etherUnits =
  let wei = case etherUnits of
        Wei v -> v
        Kwei v -> v * 1e3
        Mwei v -> v * 1e6
        Gwei v -> v * 1e9
        Szabo v -> v * 1e12
        Finney v -> v * 1e15
        Ether v -> v * 1e18
        Kether v -> v * 1e21
        Mether v -> v * 1e24
        Gether v -> v * 1e27
  in DA.Text.takeWhile (\c -> c /= ".") $ show wei


data ABIType = ABIBool Bool
             | ABIUint Text
             | ABIInt Text
             | ABIBytes Text
             | ABIString Text
             | ABIAddress Text
             | ABIList [ABIType]
  deriving (Eq, Show)


data SendStatus = New
                | Pending
                | Sent with
                    when   : Time
                    from   : Text
                    txHash : Optional Text
                | FailedToSend with
                    reason : Text
  deriving (Eq, Show)

epoch : Time = datetime 1970 Jan 1 0 0 0
