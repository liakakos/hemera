daml 1.2

module Ethereum.Transfer where

import Ethereum.Utils

import DA.Optional

type TransferRequestCid = ContractId TransferRequest
type UnsignedTransferTransactionCid = ContractId UnsignedTransferTransaction
type SignedTransferTransactionCid = ContractId SignedTransferTransaction


template TransferRequest
  with
    operator    : Party
    user        : Party
    from        : Text
    to          : Text
    value       : EtherUnits
    optGas      : Optional Int
    optGasPrice : Optional EtherUnits
  where
    signatory operator, user

    ensure validAddress from &&
      validAddress to &&
      fromOptional gasBaseFee optGas >= gasBaseFee &&
      validEtherUnits value &&
      validEtherUnits (fromOptional zeroWei optGasPrice)

    controller operator can
      TransferRequest_Accept : UnsignedTransferTransactionCid
        with
          nonce : Int
          gas : Int
          gasPrice : EtherUnits
          txToSign : Text
        do
          assert (gas >= gasBaseFee)
          assert (fromOptional gas optGas >= gas)
          assert (fromOptional gasPrice optGasPrice == gasPrice)
          create UnsignedTransferTransaction with ..

      TransferRequest_Reject : ()
        do return ()

    controller user can
      TransferRequest_Archive : ()
        do return ()


template UnsignedTransferTransaction
  with
    operator : Party
    user     : Party
    from     : Text
    to       : Text
    value    : EtherUnits
    nonce    : Int
    gas      : Int
    gasPrice : EtherUnits
    txToSign : Text
  where
    signatory operator, user

    ensure validEtherUnits value &&
      validEtherUnits gasPrice &&
      nonce >= 0 &&
      validHex txToSign

    controller user can
      UnsignedTransferTransaction_Sign : SignedTransferTransactionCid
        with
          signedTx : Text
        do create SignedTransferTransaction with sendStatus = New, ..

      UnsignedTransferTransaction_Archive : ()
        do return ()


template SignedTransferTransaction
  with
    operator   : Party
    user       : Party
    from       : Text
    to         : Text
    value      : EtherUnits
    nonce      : Int
    gas        : Int
    gasPrice   : EtherUnits
    txToSign   : Text
    signedTx   : Text
    sendStatus : SendStatus
  where
    signatory operator, user

    ensure validSignedTx txToSign signedTx

    controller user can
      SignedTransferTransaction_Send : SignedTransferTransactionCid
        do create this with sendStatus = Pending

      SignedTransferTransaction_Archive : ()
        do return ()

    controller operator can
      SignedTransferTransaction_Sent : SignedTransferTransactionCid
        with
          newSendStatus : SendStatus
        do
          assert (sendStatus == Pending)
          create this with sendStatus = newSendStatus

      SignedTransferTransaction_Fail : SignedTransferTransactionCid
        with
          reason : Text
        do create this with sendStatus = FailedToSend with ..
